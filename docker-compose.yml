services:
  # ---------- FRONTEND (React) ----------
  frontend:
    build: ./frontend
    restart: unless-stopped
    depends_on:
      - api-gateway
    ports:
      - "80:80"
    networks:
      - app-network

  # ---------- BACKEND (NestJS) ----------

  api-gateway:
    build:
      context: ./backend
      args:
        APP_NAME: api-gateway
    container_name: api_gateway
    restart: unless-stopped
    command: node dist/apps/api-gateway/main
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      NODE_ENV: development
      NATS_URL: nats://nats:4222
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - nats


  auth-service:
    build:
      context: ./backend
      args:
        APP_NAME: auth-service
    container_name: auth_service
    restart: unless-stopped
    command: node dist/apps/auth-service/main
    networks:
      - app-network
    environment:
      NATS_URL: nats://nats:4222
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      nats:
        condition: service_started
      users-service:
        condition: service_started


  users-service:
    build:
      context: ./backend
      args:
        APP_NAME: users-service
    container_name: users_service
    restart: unless-stopped
    command: node dist/apps/users-service/main
    networks:
      - app-network
    environment:
      NATS_URL: nats://nats:4222
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/${POSTGRES_DB}
    depends_on:
      postgres-db:
        condition: service_healthy
      nats:
        condition: service_started

  fichas-service:
    build:
      context: ./backend
      args:
        APP_NAME: fichas-service
    container_name: fichas_service
    restart: unless-stopped
    command: node dist/apps/fichas-service/main
    networks:
      - app-network
    environment:
      NATS_URL: nats://nats:4222
      MONGO_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo-db:27017/${MONGO_DB_NAME}?authSource=admin
    depends_on:
      mongo-db:
        condition: service_healthy
      nats:
        condition: service_started


  # ---------- INFRA ----------
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    networks:
      - app-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db:
    image: mongo:7
    container_name: mongo_db
    restart: unless-stopped
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  nats:
    image: nats:2.10-alpine
    container_name: nats_broker
    restart: unless-stopped
    ports:
      - "4222:4222" # <-- AÑADE ESTA LÍNEA
    networks:
      - app-network
      
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: