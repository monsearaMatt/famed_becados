services:
  # Frontend React
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - api-gateway
    restart: unless-stopped

  # Backend NestJS
  api-gateway:
    build:
      context: ./backend # Le decimos que construya desde el monorepo
      dockerfile: apps/api-gateway/Dockerfile # Usando su Dockerfile específico
    restart: unless-stopped
    # NO exponemos puertos al exterior. Caddy se encarga de eso.
    depends_on:
      - auth-service
      - users-service
      - fichas-service

  auth-service:
    build:
      context: ./backend
      dockerfile: apps/auth-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - users-service # Auth necesita a Users para funcionar
      - postgres-db

  users-service:
    build:
      context: ./backend
      dockerfile: apps/users-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres-db

  fichas-service:
    build:
      context: ./backend
      dockerfile: apps/fichas-service/Dockerfile
    restart: unless-stopped
    depends_on:
      - mongo-db

  # Bases de datos
  postgres-db:
    image: postgres:15-alpine # Versión específica, no "latest"
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Expone el puerto a tu máquina local para desarrollo
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Base de Datos NoSQL para Fichas Académicas
  mongo-db:
    image: mongo:7 # Versión específica y estable
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017" # Expone el puerto a tu máquina local para desarrollo
    volumes:
      - mongo_data:/data/db


networks:
  apps-network:
    driver: bridge
